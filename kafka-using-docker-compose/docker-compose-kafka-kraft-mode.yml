services:
    kafka:
        image: bitnami/kafka:latest
        container_name: kafka-kraft
        ports:
            - '29092:9092'  # Client connections
            - '29093:9093'  # Controller connections
        environment:
            KAFKA_ENABLE_KRAFT: 'yes'
            KAFKA_CFG_NODE_ID: '1'
            KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
            KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
            KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://0.0.0.0:29092
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
            KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
            KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
            KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
            KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
            ALLOW_PLAINTEXT_LISTENER: yes
        volumes:
            - ./kafka-data:/bitnami/kafka/data
        command:
            - sh
            - -c
            - |
                if [ ! -f /bitnami/kafka/data/meta.properties ]; then
                  kafka-storage.sh format --ignore-formatted -t $(kafka-storage.sh random-uuid) -c /opt/bitnami/kafka/config/kraft/server.properties
                fi
                /opt/bitnami/scripts/kafka/run.sh
        healthcheck:
            test: [ "CMD-SHELL", "nc -z localhost 29092" ]
            start_period: 10s
            interval: 10s
            timeout: 10s
            retries: 30

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafka-ui-kraft
        ports:
            - "28080:8080"
        restart: "always"
        environment:
            KAFKA_CLUSTERS_0_NAME: 'localhost'
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
        depends_on:
            kafka:
                condition: service_healthy
